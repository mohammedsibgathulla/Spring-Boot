1. Spring Boot Runners
- Application Runner and Command Line Runner interfaces lets you to execute the code after the Spring Boot application is started. You can use these interfaces to perform any actions immediately after the application has started.
- The difference between CommandLineRunner and ApplicationRunner is that the run() method of CommandLineRunner accepts array of String as an argument and run() method of ApplicationRunner accepts spring ApplicationArguments as an argument.

2. Command Line Properties
- Spring Boot application converts the command line properties into Spring Boot Environment properties.
- Command line properties take precedence over the other property sources.
- java -jar demo-0.0.1-SNAPSHOT.jar --server.port=9090

3. Spring Boot Application Properties
- Spring Boot supports both formats .properties and .yaml.

4. Externalized Properties
- Instead of keeping the properties file under classpath, we can keep the properties in different location or path.
- While running the JAR file, we can specify the properties file path. You can use the following command to specify the location of properties file while running the JAR file
- -Dspring.config.location = C:\application.properties
- java -jar -Dspring.config.location = C:\application.properties demo-0.0.1-SNAPSHOT.jar --server.port=9090

5. Use of @Value Annotation
- The @Value annotation is used to read the environment or application property value in Java code.
- To resolve the placeholder issue, we can set the default value for the property @Value("${property_key_name:default_value}")

6. Spring Boot Active Profile For application.properties
- Spring Boot application uses the application.properties by default.
- The command to set the spring active profile is java -jar demo-0.0.1-SNAPSHOT.jar --spring.profiles.active=dev

7. Spring Boot Active Profile For application.yml
- We can keep the Spring active profile properties in the single application.yml file.
- The command to set the spring active profile is java -jar demo-0.0.1-SNAPSHOT.jar --spring.profiles.active=dev

8. Spring Boot Logging
- Spring Boot uses Apache Commons logging for all internal logging.
- Spring Boot’s default configurations provides a support for the use of Java Util Logging, Log4j2, and Logback.
- By default, “INFO”, “ERROR” and “WARN” log messages will print in the log file.
- For Debug level log : java –jar demo.jar --debug
- If you want to print the logs in a file, you need to set the property logging.file or logging.path in the application.properties file.
- logging.path = /var/tmp/ -  Note that the log file name is spring.log by default.
- logging.file = /var/tmp/mylog.log
- You can define Root logger in the application.properties file as - logging.level.root = WARN

9. Building Restful Webservices
- @RestController : First of all, we are using Spring 4’s new @RestController annotation. This annotation eliminates the need of annotating each method with @ResponseBody. Under the hood, @RestController is itself annotated with @ResponseBody, and can be considered as combination of @Controller and @ResponseBody.
- @RequestBody : If a method parameter is annotated with @RequestBody, Spring will bind the incoming HTTP request body(for the URL mentioned in @RequestMapping for that method) to that parameter. While doing that, Spring will [behind the scenes] use HTTP Message converters to convert the HTTP request body into domain object [deserialize request body to domain object], based on ACCEPT or Content-Type header present in request.
- @ResponseBody : If a method is annotated with @ResponseBody, Spring will bind the return value to outgoing HTTP response body. While doing that, Spring will [behind the scenes] use HTTP Message converters to convert the return value to HTTP response body [serialize the object to response body], based on Content-Type present in request HTTP header. As already mentioned, in Spring 4, you may stop using this annotation.
- ResponseEntity is a real deal. It represents the entire HTTP response. Good thing about it is that you can control anything that goes into it. You can specify status code, headers, and body. It comes with several constructors to carry the information you want to sent in HTTP Response.
- @PathVariable This annotation indicates that a method parameter should be bound to a URI template variable [the one in ‘{}’].
- MediaType : With @RequestMapping annotation, you can additionally, specify the MediaType to be produced or consumed (using produces or consumes attributes) by that particular controller method, to further narrow down the mapping.

10. Spring Boot Exceptional Handling
- The @ControllerAdvice is an annotation, to handle the exceptions globally.
- The @ExceptionHandler is an annotation used to handle the specific exceptions and sending the custom responses to the client.

11. Spring Boot Interceptor
- You can use the Interceptor in Spring Boot to perform operations
- Before sending the request to the controller
- Before sending the response to the client
- To work with interceptor, you need to create @Component class that supports it and it should implement the HandlerInterceptor interface.
- preHandle() method − This is used to perform operations before sending the request to the controller. This method should return true to return the response to the client.
- postHandle() method − This is used to perform operations before sending the response to the client.
- afterCompletion() method − This is used to perform operations after completing the request and response.

12. Spring Boot Servlet Filter
- A filter is an object used to intercept the HTTP requests and responses of your application
- Before sending the request to the controller
- Before sending the response to the client



